// Generated by CoffeeScript 1.6.3
/*
    The Objectives are mearly a sub set of important infomation from the grid this is done to allow for caching and faster look up on the browser side because it is        faster to look up 5-10 objectives than it is to loop over 100+ grid points.
*/


/* 
    app setup
*/


(function() {
  var DialogController, GridController, GridPoint, LevelController, Objective, app, currentController, randomWrong, shuffle, speaker;

  app = angular.module('ShaniquaApp', ['timer']);

  currentController = {};

  /* 
      general Math functions
  */


  randomWrong = function() {
    var i, indexes;
    indexes = [
      {
        row: 50,
        col: 0
      }, {
        row: 150,
        col: 0
      }, {
        row: 0,
        col: 50
      }, {
        row: 100,
        col: 50
      }, {
        row: 150,
        col: 50
      }
    ];
    i = Math.floor(Math.random() * 5);
    return indexes[i];
  };

  shuffle = function(array) {
    var currentIndex, randomIndex, temporaryValue;
    currentIndex = array.length;
    temporaryValue = {};
    randomIndex = 0;
    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  };

  /* 
      httpFactories
  */


  app.factory('LevelLoader', function($http, $rootScope) {
    return {
      getLevels: function(url, scope) {
        $rootScope.$broadcast('show-loading-screen', 1);
        return $http.get(url);
      }
    };
  });

  /*
     Level functionallity.
  */


  app.controller('LevelController', LevelController = (function() {
    LevelController.$inject = ['$interval', '$scope', 'LevelLoader'];

    LevelController.prototype.stages = [
      {
        'none': 'found'
      }
    ];

    LevelController.prototype.LevelLoader = {};

    LevelController.prototype.Showing = false;

    LevelController.prototype.loadLevel = function(levelurl) {
      var scope;
      scope = this.rootScope;
      this.Showing = false;
      return this.LevelLoader.getLevels(levelurl, scope).success(function(data, status) {
        scope.$parent.$broadcast('level-downloaded', data);
        return scope.$parent.$broadcast('remove-loading-screen', 1);
      }).error(function(data, status) {
        return alert('error');
      });
    };

    LevelController.prototype.getSpeakerList = function(scope) {
      return this.LevelLoader.getLevels('json/characters.json', scope).success(function(data, status) {
        return scope.$parent.$broadcast('speakers-downloaded', data);
      }).error(function(data, status) {
        return alert('error');
      });
    };

    LevelController.prototype.getLevelList = function(scope, stages, showing) {
      this.stages = stages;
      this.rootScope.$parent.$broadcast('show-loading-screen', 1);
      return this.LevelLoader.getLevels('levels/levellist.json', scope).success(function(data, status) {
        scope.$parent.$broadcast('level-list-downloaded', data);
        return scope.$parent.$broadcast('remove-loading-screen', 1);
      }).error(function(data, status) {
        return alert('error');
      });
    };

    LevelController.prototype.getBackgroundStyle = function(image) {
      return {
        'width': '200px',
        'height': '200px',
        'background-image': 'url(' + image + ')'
      };
    };

    function LevelController(interval, $scope, LevelLoader) {
      this.interval = interval;
      this.LevelLoader = LevelLoader;
      this.rootScope = $scope;
      this.rootScope.$on('level-list-downloaded', function(event, data) {
        event.currentScope.levels.Showing = true;
        return event.currentScope.levels.stages = data;
      });
      this.getSpeakerList($scope);
      this.getLevelList($scope, this.stages, this.Showing);
    }

    return LevelController;

  })());

  /*
      The grid Controller
  */


  Objective = (function() {
    function Objective(name, description, failedMessage, pointid, image) {
      this.name = name;
      this.description = description;
      this.failedMessage = failedMessage;
      this.pointid = pointid;
      this.image = image;
    }

    return Objective;

  })();

  GridPoint = (function() {
    function GridPoint(image, backImage, name, description, failedMessage, size, pointid, PrimaryObjective) {
      this.image = image;
      this.backImage = backImage;
      this.name = name;
      this.description = description;
      this.failedMessage = failedMessage;
      this.size = size;
      this.pointid = pointid;
      this.PrimaryObjective = PrimaryObjective;
    }

    return GridPoint;

  })();

  app.controller('GridController', GridController = (function() {
    GridController.$inject = ['$interval', '$scope'];

    GridController.prototype.CurrentObjective = 0;

    GridController.prototype.Objectives = [];

    GridController.prototype.Grids = [];

    GridController.prototype.StopTimer = [];

    GridController.prototype.Showing = false;

    GridController.prototype.getObjectiveStyle = function(objective) {
      return {
        'width': '50px',
        'height': '50px',
        'background-image': 'url(' + this.levelData.BackgroundImage + ')',
        'background-repeat': 'no-repeat',
        'background-position': -objective.image.row + 'px ' + -objective.image.col + 'px'
      };
    };

    GridController.prototype.getBackgroundStyle = function(point) {
      return {
        'width': '50px',
        'height': '50px',
        'background-image': 'url(' + this.levelData.BackgroundImage + ')',
        'background-repeat': 'no-repeat',
        'background-position': -point.backImage.row + 'px ' + -point.backImage.col + 'px'
      };
    };

    GridController.prototype.getForegroundStyle = function(point) {
      return {
        'width': '50px',
        'height': '50px',
        'background-image': 'url(' + this.levelData.ForegroundImage + ')',
        'background-repeat': 'no-repeat',
        'background-position': -point.image.row + 'px ' + -point.image.col + 'px'
      };
    };

    GridController.prototype.createForegrounds = function(size) {
      var col, foreground, i, j, length, row, _i;
      foreground = [];
      length = this.levelData.spriteSheet.squareLength * this.levelData.spriteSheet.squareLength;
      j = 0;
      for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
        row = j % this.levelData.spriteSheet.squareLength;
        col = Math.floor(j / this.levelData.spriteSheet.squareLength);
        foreground[i] = {
          row: row * 50,
          col: col * 50
        };
        j++;
        if (j === length) {
          j = 0;
        }
      }
      return shuffle(foreground);
    };

    GridController.prototype.createPrimaryObjectives = function() {
      var point, _i, _len, _ref;
      _ref = this.Grids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        if (point.PrimaryObjective) {
          this.Objectives.push(new Objective(point.name, point.description, point.failedMessage, point.id, point.backImage));
        }
      }
      this.Objectives[0].timer = '0:00';
      this.Objectives[0].timeinSeconds = -1;
      return this.CurrentObjective = 0;
    };

    GridController.prototype.createSubObjectives = function(objective) {};

    GridController.prototype.RecursivePointCreator = function(points, foregrounds, startingIndex) {
      var point, _i, _len;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        this.Grids.push(new GridPoint(foregrounds[startingIndex], point.ImageLocation, point.Name, point.Objective, point.FoundMessage, this.levelData.spriteSheet.boxSize, startingIndex, point.PrimaryObjective));
      }
      startingIndex++;
      if (point.NewItems) {
        startingIndex = this.RecursivePointCreator(point.NewItems, foregrounds, startingIndex);
      }
      return startingIndex;
    };

    GridController.prototype.createGridPoints = function() {
      var foregroundIndex, foregrounds, i, nondummyItems, _i, _ref;
      foregrounds = this.createForegrounds(this.levelData.size);
      foregroundIndex = 0;
      foregroundIndex = this.RecursivePointCreator(this.levelData.Items, foregrounds, foregroundIndex);
      this.createPrimaryObjectives();
      nondummyItems = foregroundIndex;
      for (i = _i = nondummyItems, _ref = this.levelData.size; nondummyItems <= _ref ? _i < _ref : _i > _ref; i = nondummyItems <= _ref ? ++_i : --_i) {
        this.Grids.push(new GridPoint(foregrounds[i], randomWrong(), '', '', '', 20, i));
      }
      return shuffle(this.Grids);
    };

    GridController.prototype.checkGridPoint = function(point) {
      var found;
      found = false;
      if (point.id === this.Objectives[this.CurrentObjective].pointid) {
        found = true;
      }
      if (found) {
        this.Objectives[this.CurrentObjective].completed = true;
        this.rootScope.$parent.$broadcast('thank-you', this.Objectives[this.CurrentObjective].name);
        this.CurrentObjective++;
        if (this.CurrentObjective === this.Objectives.length) {
          return this.StopTimer();
        }
      } else {
        this.Objectives[this.CurrentObjective].timeinSeconds += 10;
        this.rootScope.$parent.$broadcast('failed-to-find', this.Objectives[this.CurrentObjective].failedMessage);
        return this.rootScope.$broadcast('timer-add-time', 10);
      }
    };

    function GridController(interval, $scope) {
      this.interval = interval;
      this.rootScope = $scope;
      currentController = this.Objectives;
      this.StopTimer = function() {
        return this.rootScope.$parent.$broadcast('timer-stop');
      };
      this.rootScope.$on('finished-conversation', function(event) {
        return event.currentScope.grid.Showing = true;
      });
      this.rootScope.$on('level-downloaded', function(event, item) {
        event.currentScope.grid.levelData = item;
        return event.currentScope.grid.createGridPoints();
      });
    }

    return GridController;

  })());

  /*
     Dialog functionallity.
  */


  speaker = (function() {
    function speaker(name, image, text) {
      this.name = name;
      this.image = image;
      this.text = text;
    }

    return speaker;

  })();

  app.controller('DialogController', DialogController = (function() {
    DialogController.prototype.CurrentDialog = [];

    DialogController.prototype.CurrentDialogIndex = 0;

    DialogController.prototype.Showing = false;

    DialogController.prototype.Finished = false;

    DialogController.prototype.isGenericMessage = false;

    DialogController.prototype.isRedMessage = false;

    DialogController.prototype.isGreenMessage = false;

    DialogController.prototype.Conversation = [];

    DialogController.$inject = ['$interval', '$scope'];

    DialogController.prototype.ThankYou = function(thanksMessage) {
      this.Showing = true;
      this.Conversation = [];
      this.Conversation.push(new speaker('', '', thanksMessage));
      this.isGenericMessage = true;
      this.Showing = true;
      this.isGreenMessage = true;
      return this.CurrentDialog.push(this.Conversation[0]);
    };

    DialogController.prototype.Failed = function(item) {
      this.Conversation = [];
      this.Conversation.push(new speaker('', '', "That is not " + item));
      this.isGenericMessage = true;
      this.Showing = true;
      this.isRedMessage = true;
      return this.CurrentDialog.push(this.Conversation[0]);
    };

    DialogController.prototype.MoreItems = function(message) {
      var currentSpeaker;
      currentSpeaker = this.speakers[message.SpeakerId];
      this.Conversation.push(new speaker(currentSpeaker.Name, currentSpeaker.Image, message.Text));
      this.CurrentDialog.push(this.Conversation[0]);
      return this.Showing = true;
    };

    DialogController.prototype.FinishConversating = function() {
      this.rootScope.$parent.$broadcast('timer-start');
      this.rootScope.$parent.$broadcast('finished-conversation');
      return this.Showing = false;
    };

    DialogController.prototype.CreateConversation = function() {
      var conversation, currentSpeaker, _i, _len, _ref;
      _ref = this.levelData.OpeningConversation;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        conversation = _ref[_i];
        currentSpeaker = this.speakers[conversation.SpeakerId];
        this.Conversation.push(new speaker(currentSpeaker.Name, currentSpeaker.Image, conversation.Text));
      }
      this.CurrentDialog.push(this.Conversation[0]);
      return this.Showing = true;
    };

    DialogController.prototype.CreateFinishingConversation = function(time) {
      var currentSpeaker;
      currentSpeaker = this.speakers[this.levelData.EndingConversation.SpeakerId];
      this.Conversation = [];
      this.Conversation.push(new speaker(currentSpeaker.Name, currentSpeaker.Image, conversation.Text));
      this.Finished = true;
      this.Showing = true;
      return this.CurrentDialog.push(this.Conversation[0]);
    };

    DialogController.prototype.NextDialog = function() {
      this.CurrentDialogIndex++;
      this.CurrentDialog.pop();
      if (this.CurrentDialogIndex === this.Conversation.length && !this.Finished && !this.isGenericMessage) {
        this.FinishConversating();
      } else if (!this.Finished && !this.isGenericMessage) {
        this.CurrentDialog.push(this.Conversation[this.CurrentDialogIndex]);
      } else {
        this.Showing = false;
      }
      this.isRedMessage = false;
      return this.isGreenMessage = false;
    };

    function DialogController(interval, $scope) {
      this.interval = interval;
      this.rootScope = $scope;
      this.rootScope.$on('speakers-downloaded', function(event, item) {
        return event.currentScope.dialog.speakers = item;
      });
      this.rootScope.$on('level-downloaded', function(event, item) {
        event.currentScope.dialog.levelData = item;
        return event.currentScope.dialog.CreateConversation();
      });
      this.rootScope.$on('thank-you', function(event, item) {
        return event.currentScope.dialog.ThankYou(item);
      });
      this.rootScope.$on('failed-to-find', function(event, item) {
        return event.currentScope.dialog.Failed(item);
      });
      this.rootScope.$on('more-items', function(event, message) {
        return event.currentScope.dialog.MoreItems(message);
      });
      this.rootScope.$on('found-everything', function(event, time) {
        return event.currentScope.dialog.CreateFinishingConversation(time);
      });
    }

    return DialogController;

  })());

}).call(this);
