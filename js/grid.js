// Generated by CoffeeScript 1.6.3
/*
    The Objectives are mearly a sub set of important infomation from the grid this is done to allow for caching and faster look up on the browser side because it is        faster to look up 5-10 objectives than it is to loop over 100+ grid points.
*/


(function() {
  var GridController, GridPoint, Objective, app, currentController, shuffle;

  currentController = {};

  Objective = (function() {
    function Objective(name, description, failedMessage, pointid) {
      this.name = name;
      this.description = description;
      this.pointid = pointid;
      this.failedMessage = failedMessage;
      this.completed = false;
    }

    return Objective;

  })();

  GridPoint = (function() {
    function GridPoint(image, name, description, failedMessage, size, pointid) {
      this.id = pointid;
      this.image = image;
      this.size = size;
      this.name = name;
      this.description = description;
      this.failedMessage = failedMessage;
    }

    return GridPoint;

  })();

  shuffle = function(array) {
    var currentIndex, randomIndex, temporaryValue;
    currentIndex = array.length;
    temporaryValue = {};
    randomIndex = 0;
    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  };

  app = angular.module('ShaniquaApp', []);

  app.controller('GridController', GridController = (function() {
    GridController.$inject = ['$interval'];

    GridController.prototype.CurrentObjective = 0;

    GridController.prototype.Objectives = [];

    GridController.prototype.Grids = [];

    GridController.prototype.StageName = 'Shaniqua goes to the mall';

    GridController.prototype.size = 19;

    GridController.prototype.length = 4;

    GridController.prototype.objectiveTimer = function() {
      var mins, newTime, secondsRemainder;
      newTime = {};
      this.Objectives[this.CurrentObjective].timeinSeconds++;
      mins = this.Objectives[this.CurrentObjective].timeinSeconds % 60;
      secondsRemainder = this.Objectives[this.CurrentObjective].timeinSeconds - (this.Objectives[this.CurrentObjective].timeinSeconds * mins);
      if (secondsRemainder < 10) {
        newTime = mins + ':0' + secondsRemainder;
      } else {
        newTime = mins + ':' + secondsRemainder;
      }
      return this.Objectives[this.CurrentObjective].timer = newTime;
    };

    GridController.prototype.createObjectives = function(interval, scope) {
      var point, _i, _len, _ref;
      this.interval = interval;
      this.scope = scope;
      _ref = this.Grids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        this.Objectives.push(new Objective(point.name, point.description, point.failedMessage, point.id));
      }
      this.Objectives[0].timer = '0:00';
      this.Objectives[0].timeinSeconds = -1;
      this.CurrentObjective = 0;
      return this.interval(this.objectiveTimer, 1000);
    };

    GridController.prototype.createGridPoints = function(interval) {
      var i, nondummyItems, _i, _ref;
      this.interval = interval;
      this.Grids.push(new GridPoint('green', 'Shaniqua', 'Shaniqua is lost help find her', 'Hell no!', 20, 0));
      this.Grids.push(new GridPoint('blue', "Shaniqua's purse", 'Shaniqua lost her pruse help her find it', "That's not my purse!", 20, 1));
      this.Grids.push(new GridPoint('black', "Shaniqua's lipstick", 'Shaniqua is lost her lipstick help her find it', "That's not my lipstick!", 20, 2));
      this.createObjectives(this.interval);
      nondummyItems = this.Grids.length - 1;
      for (i = _i = nondummyItems, _ref = this.size; nondummyItems <= _ref ? _i < _ref : _i > _ref; i = nondummyItems <= _ref ? ++_i : --_i) {
        this.Grids.push(new GridPoint('red', '', '', '', 20, i));
      }
      return shuffle(this.Grids);
    };

    GridController.prototype.checkGridPoint = function(point) {
      var found;
      found = false;
      if (point.id === this.Objectives[this.CurrentObjective].pointid) {
        found = true;
      }
      if (found) {
        this.Objectives[this.CurrentObjective].completed = true;
        alert('Found ' + this.Objectives[this.CurrentObjective].name);
        this.CurrentObjective++;
        if (this.CurrentObjective !== this.Objectives.length) {
          this.Objectives[this.CurrentObjective].timer = '0:00';
          return this.Objectives[this.CurrentObjective].timeinSeconds = -1;
        } else {
          return clearInterval();
        }
      } else {
        this.Objectives[this.CurrentObjective].timeinSeconds += 10;
        return alert(this.Objectives[this.CurrentObjective].failedMessage + ': 10 sec  added');
      }
    };

    function GridController(interval, scope) {
      this.interval = interval;
      this.scope = scope;
      this.createGridPoints(this.interval, this.scope);
      currentController = this.Objectives;
    }

    return GridController;

  })());

}).call(this);
