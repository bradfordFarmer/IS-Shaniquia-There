// Generated by CoffeeScript 1.6.3
(function() {
  var Grid, GridController, Object, Objective, app, shuffle;

  Objective = (function() {
    function Objective(name, description, failedMessage, objectid) {
      this.name = name;
      this.description = description;
      this.objectid = objectid;
      this.failedMessage = failedMessage;
      this.completed = false;
    }

    return Objective;

  })();

  Object = (function() {
    function Object(hiddenObject, id) {
      this.id = id;
      this.hiddenObject = hiddenObject;
    }

    return Object;

  })();

  Grid = (function() {
    function Grid(image, size, objectid) {
      this.image = image;
      this.size = size;
      this.objectid = objectid;
    }

    return Grid;

  })();

  shuffle = function(array) {
    var currentIndex, randomIndex, temporaryValue;
    currentIndex = array.length;
    temporaryValue = {};
    randomIndex = 0;
    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  };

  app = angular.module('ShaniquaApp', []);

  app.controller('GridController', GridController = (function() {
    function GridController() {}

    GridController.prototype.CurrentObjective = 0;

    GridController.prototype.Objectives = [];

    GridController.prototype.Objects = [];

    GridController.prototype.Grids = [];

    GridController.prototype.size = 8;

    GridController.prototype.length = 4;

    GridController.prototype.fillWithDummyObjects = function() {
      var i, _i, _ref, _ref1, _results;
      _results = [];
      for (i = _i = _ref = this.Objectives.length - 1, _ref1 = this.size; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(this.Objects.push(new Object('none', i)));
      }
      return _results;
    };

    GridController.prototype.createObjects = function() {
      this.Objects.push(new Object('Shaniquia', this.Objects.length));
      this.Objectives.push(new Objective('Shaniquia', 'Shaniquia is lost help find her', 'Hell no!', this.Objects.length - 1));
      this.Objects.push(new Object("Shaniquia's purse", this.Objects.length));
      this.Objectives.push(new Objective("Shaniquia's purse", 'Shaniquia lost her pruse help her find it', "That's not my purse!", this.Objects.length - 1));
      this.Objects.push(new Object("Shaniquia's lipstick", this.Objects.length));
      this.Objectives.push(new Objective("Shaniquia's lipstick", 'Shaniquia is lost her lipstick help her find it', "That's not my lipstick!", this.Objects.length - 1));
      return this.fillWithDummyObjects();
    };

    GridController.prototype.createGridPoints = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.Grids.push(new Grid('Is ' + this.Objectives[this.CurrentObjective].name + ' There?', 20, this.Objects[i].id));
      }
      return shuffle(this.Grids);
    };

    GridController.prototype.checkGridPoint = function(objectid) {
      var found, object, _i, _len, _ref;
      found = false;
      _ref = this.Objects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        if (object.id === objectid && object.id === this.Objectives[this.CurrentObjective].objectid) {
          found = true;
        }
      }
      if (found) {
        this.Objectives[this.CurrentObjective].completed = true;
        alert('found' + this.Objectives[this.CurrentObjective].name);
        return this.CurrentObjective++;
      } else {
        return alert(this.Objectives[this.CurrentObjective].failedMessage);
      }
    };

    GridController.prototype.init = function() {
      this.createObjects();
      return this.createGridPoints();
    };

    return GridController;

  })());

}).call(this);
